name: Tests and Deploy

on:
    push:
        branches: [develop]

jobs:
    tests:
        runs-on: ubuntu-latest

        services:
            mariadb:
                image: mariadb:10.6
                env:
                    MARIADB_ROOT_PASSWORD: password
                    MARIADB_DATABASE: app
                    MARIADB_USER: app
                    MARIADB_PASSWORD: password
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping -h localhost"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.2
                  extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, mbstring, zip
                  coverage: none

            - name: Validate composer.json and composer.lock
              run: composer validate --strict || true

            - name: Cache Composer packages
              id: composer-cache
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-php-8.2-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-8.2-

            - name: Install dependencies
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Create .env.test.local
              run: |
                  echo "DATABASE_URL=mysql://app:password@127.0.0.1:3306/app" > .env.test.local
                  echo "APP_ENV=test" >> .env.test.local
                  echo "APP_BASE_DOMAIN=localhost" >> .env.test.local

            - name: Setup test database
              run: |
                  # Grant ALL privileges on test databases to app user
                  MYSQL_PWD=password mysql -h127.0.0.1 -uroot -e "GRANT ALL PRIVILEGES ON \`app_test%\`.* TO 'app'@'%'; FLUSH PRIVILEGES;"
                  # Create test database
                  php bin/console doctrine:database:create --env=test
                  php bin/console doctrine:migrations:migrate --no-interaction --env=test

            - name: Load fixtures (if available)
              run: php bin/console doctrine:fixtures:load --no-interaction --env=test || true

            - name: Run PHPUnit tests
              run: php bin/phpunit

    deploy:
        runs-on: ubuntu-latest
        needs: tests
        if: success()

        steps:
            - name: Deploy job started
              run: |
                  echo "‚úÖ Deploy job starting..."
                  echo "Tests job result: ${{ needs.tests.result }}"

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.2
                  extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, mbstring, zip

            - name: Install dependencies (with dev for cache commands)
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Setup production environment
              run: |
                  echo "APP_ENV=prod" > .env.local
                  echo "APP_DEBUG=false" >> .env.local

            - name: Clear and warmup cache
              run: |
                  php bin/console cache:clear --env=dev
                  php bin/console cache:warmup --env=dev

            - name: Install assets
              run: php bin/console asset-map:compile --env=prod

            - name: Reinstall dependencies (production only)
              run: composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader --no-scripts

            - name: Prepare deployment files
              run: |
                  # Remove development files and directories
                  rm -rf tests/
                  rm -rf .git/
                  rm -rf .github/
                  rm -rf var/cache/*
                  rm -rf var/log/*
                  rm -f .env.test.local
                  rm -f phpunit.dist.xml
                  rm -f .gitignore
                  rm -f README.md

            - name: Check FTP secrets
              run: |
                  echo "Checking FTP configuration..."
                  if [ -z "${{ secrets.FTP_SERVER }}" ]; then
                    echo "‚ùå FTP_SERVER secret is not configured"
                    FTP_READY=false
                  else
                    echo "‚úÖ FTP_SERVER is configured"
                    FTP_READY=true
                  fi

                  if [ -z "${{ secrets.FTP_USERNAME }}" ]; then
                    echo "‚ùå FTP_USERNAME secret is not configured"
                    FTP_READY=false
                  else
                    echo "‚úÖ FTP_USERNAME is configured"
                  fi

                  if [ -z "${{ secrets.FTP_PASSWORD }}" ]; then
                    echo "‚ùå FTP_PASSWORD secret is not configured"
                    FTP_READY=false
                  else
                    echo "‚úÖ FTP_PASSWORD is configured"
                  fi

                  echo "FTP_READY=$FTP_READY" >> $GITHUB_ENV

            - name: Deploy to FTP (Attempt 1)
              if: env.FTP_READY == 'true'
              id: ftp_deploy_1
              continue-on-error: true
              uses: SamKirkland/FTP-Deploy-Action@v4.3.4
              with:
                  server: ${{ secrets.FTP_SERVER }}
                  username: ${{ secrets.FTP_USERNAME }}
                  password: ${{ secrets.FTP_PASSWORD }}
                  local-dir: ./
                  server-dir: /
                  protocol: ftp
                  port: 21
                  timeout: 60000
                  server-timeout: 60000
                  security: loose
                  log-level: verbose
                  exclude: |
                      **/.git*
                      **/.git*/**
                      **/node_modules/**
                      **/tests/**
                      **/.env.test*
                      **/var/cache/**
                      **/var/log/**

            - name: Wait before retry
              if: env.FTP_READY == 'true' && steps.ftp_deploy_1.outcome == 'failure'
              run: sleep 30

            - name: Deploy to FTP (Attempt 2)
              if: env.FTP_READY == 'true' && steps.ftp_deploy_1.outcome == 'failure'
              id: ftp_deploy_2
              continue-on-error: true
              uses: SamKirkland/FTP-Deploy-Action@v4.3.4
              with:
                  server: ${{ secrets.FTP_SERVER }}
                  username: ${{ secrets.FTP_USERNAME }}
                  password: ${{ secrets.FTP_PASSWORD }}
                  local-dir: ./
                  server-dir: /
                  protocol: ftp
                  port: 21
                  timeout: 120000
                  server-timeout: 120000
                  security: loose
                  log-level: verbose
                  exclude: |
                      **/.git*
                      **/.git*/**
                      **/node_modules/**
                      **/tests/**
                      **/.env.test*
                      **/var/cache/**
                      **/var/log/**

            - name: Deploy to FTP (Final Attempt)
              if: env.FTP_READY == 'true' && steps.ftp_deploy_1.outcome == 'failure' && steps.ftp_deploy_2.outcome == 'failure'
              uses: SamKirkland/FTP-Deploy-Action@v4.3.4
              with:
                  server: ${{ secrets.FTP_SERVER }}
                  username: ${{ secrets.FTP_USERNAME }}
                  password: ${{ secrets.FTP_PASSWORD }}
                  local-dir: ./
                  server-dir: /
                  protocol: ftp
                  port: 21
                  timeout: 180000
                  server-timeout: 180000
                  security: loose
                  log-level: verbose
                  exclude: |
                      **/.git*
                      **/.git*/**
                      **/node_modules/**
                      **/tests/**
                      **/.env.test*
                      **/var/cache/**
                      **/var/log/**

            - name: Deployment summary
              run: |
                  if [ "${{ env.FTP_READY }}" = "true" ]; then
                    if [ "${{ steps.ftp_deploy_1.outcome }}" = "success" ]; then
                      echo "üöÄ Deployment completed successfully on first attempt!"
                    elif [ "${{ steps.ftp_deploy_2.outcome }}" = "success" ]; then
                      echo "üöÄ Deployment completed successfully on second attempt!"
                    elif [ "${{ steps.ftp_deploy_1.outcome }}" = "failure" ] && [ "${{ steps.ftp_deploy_2.outcome }}" = "failure" ]; then
                      echo "üöÄ Deployment completed successfully on final attempt!"
                    else
                      echo "‚ùå Deployment failed after all attempts"
                      exit 1
                    fi
                  else
                    echo "‚ö†Ô∏è  Deployment skipped - FTP secrets not configured"
                    echo "To enable deployment, configure these GitHub repository secrets:"
                    echo "  - FTP_SERVER"
                    echo "  - FTP_USERNAME"
                    echo "  - FTP_PASSWORD"
                  fi
